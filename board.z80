
#data   _BOARD_VARIABLES

; -----=== Constants ===-----

; Define the game board size
BOARD_HEIGHT            EQU 20
BOARD_WIDTH             EQU 10

CELL_BOUNDARY           EQU 0b10000000 ; blocked (bit 7)
CELL_FREE               EQU 0b00000000 ; available (bit 7)


; -----=== Variables ===-----

; Reserve the board space, including a surrounding border
BOARD       DEFS (BOARD_HEIGHT + 2) * (BOARD_WIDTH + 2)



#code   _BOARD

; -----=== Subroutines ===-----

; Initialize a 12 x 22 byte table. The bit 7 of each byte indicate that the
; cell is occupied or not. The low nibble indicate the color of the cell.
; Valid colors are between 0 and 7. The bit 3 indicate that the cell must not
; be painted if it is set.
INIT_BOARD:
    LD      HL,BOARD
    LD      D,0b10001000        ; boundary value: 136 dec or $88 hex
    LD      E,0b00000000        ; Free area value 0

; The first row is filled with boundary values
    LD      C,BOARD_WIDTH + 2
IB_FIRST_ROW:
    LD      (HL),D              ; Paint a boundary cell
    INC     HL                  ; Move to the next cell
    DEC     C                   ; One left column to paint.
    JR      NZ,IB_FIRST_ROW     ; Jump if we are not done painting

    LD      B,BOARD_HEIGHT
IB_MIDDLE_ROWS:                 ; Middle rows are bonded left and right and free inside.
    LD      C,BOARD_WIDTH       ; Reset the column counter
    LD      (HL),D              ; Set the left byte to a blocked cell
    INC     HL                  ; Move to the next cell
IB_CENTRAL_CELL:
    LD      (HL),E              ; Paint middle column with a free cell.
    INC     HL                  ; Move to the next cell
    DEC     C                   ; Decrement the column counter.
    JR      NZ,IB_CENTRAL_CELL  ; Jump to the next cell if we are not done.
    LD      (HL),D              ; Done with central cell, paint the right boundary.
    INC     HL                  ; move to the next row
    DEC     B                   ; Decrement the row counter
    JR      NZ,IB_MIDDLE_ROWS  ; If there is more middle row, jump to do the next one.


    LD      C,BOARD_WIDTH+2 ; Reset the column counter
IB_LAST_ROW:           ; The last row is filled with boundary values
    LD      (HL),D      ; Paint the cell as a boundary
    INC     HL          ; Move to the next cell.
    DEC     C           ; Decrement the cell counter.
    JR      NZ,IB_LAST_ROW ; Continue painting cells until done.

    RET                 ; GTFO


; Load the tetromino from IX into the board at row, col (B,C).
; Parameters: IX contains the tetromino sprite address.
;             B  contains the he row value
;             C  contains the column value
; Changes: A,B,C,D,E
;
; Remarks:
; We are adding togeteher all tetromino cells with all matching board cells, into the board cell.
; Since empty tetromino cells are 0, it has no impact on the resulting board cell value. Moreover,
; since empty board cells are 0, it will let tetromino filled cell go through the board
; unhindered. But collision will result if the final board cell is different than the original
; tetromino cell. We do not take that into account here since we expect the collison test have
; been made prior calling the current subroutine.

LOAD_TETROMINO:
    PUSH    IX                      ; Put IX on the stack to be grabbed by HL
    POP     HL                      ; Get the tetromino sprite address into HL
    ADDHL   TETROMINO_DATA          ; HL = TetrominoCell at index 0
    LD      A,B                     ; A = Row
    MULA_BY_12                      ; A = 12 * Row
    ADD     C                       ; A = 12 * Row + Col
    LD      D,0                     ; Reset D
    LD      E,A                     ; DE = 12 * Row + Col
    ADDDE   BOARD                   ; DE = Destination BoardCell

    LD      C,4                     ; Load the number of sprite rows in C
LOAD_TETROMINO_ROW:
    LD      B,4                     ; Load the number of sprite colums in B
LOAD_TETROMINO_COL:
    LD      A,(HL)                  ; A = TetrominoCellValue
    EX      DE,HL                   ; HL = BoardCell; DE = TetrominoCell
    ADD     A,(HL)                  ; A = A + BoardCellValue
    EX      DE,HL                   ; HL = TetrominoCell; DE = BoardCell
    LD      (DE),A                  ; BoardCellValue = TetrominoCellValue
    INC     HL                      ; Move to the next TetrominoCell
    INC     DE                      ; Move to the next BoardCell
    DJNZ    LOAD_TETROMINO_COL      ; B = B - 1; Loop to _COL until B == 0.
    ADDDE   BOARD_WIDTH - 2         ; Move to the BoardCell pointer to the next board row
    DEC     C                       ; One less row to go
    JR      NZ,LOAD_TETROMINO_ROW   ; Load the next row if there is still rows to do...

    RET                             ; ...else, we are done.