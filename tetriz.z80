#target bin

#include "retroz-bios-inc.z80"
#include "callstack.z80"


    MACRO _ADD_DEBC
    EX      DE,HL
    ADD     HL,BC
    EX      DE,HL
    ENDM

;layout
#code   _HEADER
#code   _PROGRAM
#code   _PROGRAM_FOOTER
#code   _DATA
#data   _HEAP,_DATA_end

EXEC_TARGET     EQU $8100

CLOCK_INIT      EQU 5000
PG_ROWS         EQU 22
PG_COLS         EQU 12
NULL            EQU 0
TRUE            EQU 1
FALSE           EQU 0

#data _HEAP
    .PHASE  EXEC_TARGET+_PROGRAM_size+_DATA_size

ITOA_BUF        DEFS 17
PLAYGROUND      DEFS PG_ROWS * PG_COLS
PLAYGROUND_END:
SPRITE:
SPRITE_ORIENT   DEFS 1
SPRITE_INDEX    DEFS 1
SPRITE_LOC:
SPRITE_COL      DEFS 1
SPRITE_ROW      DEFS 1
LAST_COLOR      DEFS 1
RANDOM_SEED     DEFS 2
SCORE           DEFS 2
CLOCK           DEFS 2


#code _HEADER
    DEFB 0
    DEFW _PROGRAM_size+_DATA_size
    DEFW EXEC_TARGET


#code _DATA
    .PHASE  EXEC_TARGET+_PROGRAM_size

WELCOME         DEFB "+++ TetriZ +++",0
PRESS_RESET     DEFB "Press any key to reset...",0
PRESS_START     DEFB "Press any key to start...",0
RESETTING       DEFB "Resetting...",0
PADDING         DEFB "     ",0
SCORE_TEXT      DEFB "SCORE: ",0
BOX_LINE        DEFB " **************** ",0
GAME_OVER_TXT   DEFB " *  GAME  OVER  * ",0
EMPTY_ROW       DEFB 0,0,0,0,0,0,0,0,0,0

#include "tetroids.z80"


#code _PROGRAM
    .PHASE  EXEC_TARGET

    ; Initialization

    _ADDLP  WELCOME
    _CALL   PRINTLN
    _ADDLP  PRESS_START
    _CALL   PRINT

    CALL    START_RX_INT    ;Start listening to keyboard inputs
WAIT_KEY:
    LD      HL,(RANDOM_SEED)
    INC     HL
    LD      (RANDOM_SEED),HL
    CALL    GETCHAR
    JR      Z,WAIT_KEY

TETRIZ_START:
    DI
    _ADDLP  1500                ; Sleep 1.5 seconds before starting
    _CALL   SLEEP
    CALL    CLS

    CALL    INIT_PLAYGROUND
    CALL    PRINT_PLAYGROUND

    CALL    SPAWN_SPRITE
    CALL    DRAW_SPRITE

    SUB     A                   ; Set A to 0
    LD      (SCORE),A
    LD      (SCORE+1),A         ; Clear up the score
    CALL    PRINT_SCORE

    LD      HL,CLOCK_INIT
    LD      (CLOCK),HL

    EI


PROGRAM_LOOP:
    ; Read the last key pressed asynchronously
    CALL    GETCHAR         ; Read the next character in the console
    JR      Z,PROGRAM_LOOP
      ; No key pressed
    LD      A,L             ; Get the character in A

    CP      'Q'
    JP      Z,PROGRAM_EXIT  ; If Q is pressed, exit.

    CP      'r'
    JP      Z,TETRIZ_START  ; If r is pressed, restart the game.

    ; Rotate clockwise
    CP      'w'
    LD      B,1
    CALL    Z,SPRITE_ROTATE

    ; Rotate counter clockwise
    CP      's'
    LD      B,-1
    CALL    Z,SPRITE_ROTATE

    ; Move right
    CP      'd'
    LD      B,1
    CALL    Z,SPRITE_TRANSLATE

    ; Move left
    CP      'a'
    LD      B,-1
    CALL    Z,SPRITE_TRANSLATE

    ; Move down
    CP      ' '
    CALL    Z,SPRITE_DOWN

    ; do the clock down stuff
    ;LD      HL,CLOCK
    ;DEC     (HL)


    JP      PROGRAM_LOOP


PROGRAM_EXIT:
    LD      B,24
    LD      C,1
    _ADDRP  BC
    _CALL   SET_POS
    _ADDLP  RESETTING
    _CALL   PRINTLN
    JP      0                   ; Soft reset


; Set Z if the sprite can go down
; Set NZ if the sprite cannot go down
CAN_GO_DOWN:
    PUSH    BC                  ; Required because of the pop in check_collision
    _ADDLP  (SPRITE)            ; Add sprite index and orient as param
    _CALL   GET_SPRITE          ; Get the future sprite in HL
    EX      DE,HL               ; Save sprite address in DE
    LD      A,(SPRITE_COL)
    LD      C,A
    LD      A,(SPRITE_ROW)
    ADD     1                   ; Go down one row
    LD      B,A
    _ADDRP  BC
    _CALL   GET_PLAYGROUND_POS  ; Get the position in HL
    EX      DE,HL               ; HL <- sprite address, DE <- position
    JR      CHECK_COLLISION


; Set Z if translation can occur
; Set NZ if translation cannot occur
CAN_TRANSLATE:
    PUSH    BC
    _ADDLP  (SPRITE)            ; Add sprite index and orient as param
    _CALL   GET_SPRITE          ; Get the future sprite in HL
    EX      DE,HL               ; Save sprite address in DE
    LD      A,(SPRITE_COL)
    ADD     B
    LD      C,A
    LD      A,(SPRITE_ROW)
    LD      B,A
    _ADDRP  BC
    _CALL   GET_PLAYGROUND_POS  ; Get the position in HL
    EX      DE,HL               ; HL <- sprite address, DE <- position
    JR      CHECK_COLLISION


; Set Z if new sprite can be spawn
; Set NZ if new sprite can not be spawned
CAN_SPAWN:
    PUSH    BC
    _ADDLP  (SPRITE)            ; Add sprite index and orient as param
    _CALL   GET_SPRITE          ; Get the future sprite in HL
    EX      DE,HL               ; Save sprite address in DE
    LD      A,(SPRITE_COL)
    LD      C,A
    LD      A,(SPRITE_ROW)
    LD      B,A
    _ADDRP  BC
    _CALL   GET_PLAYGROUND_POS  ; Get the position in HL
    EX      DE,HL               ; HL <- sprite address, DE <- position
    JR      CHECK_COLLISION


; Set Z if rotation can occur
; Set NZ if rotation cannot occur
CAN_ROTATE:
    PUSH    BC
    LD      A,(SPRITE_ORIENT)
    ADD     B
    AND     $03                 ; Modulo 4
    LD      E,A                 ; Put projected orientation in E
    LD      A,(SPRITE_INDEX)
    LD      D,A                 ; Put index in D
    _ADDRP  DE                  ; Add sprite index and orient as param
    _CALL   GET_SPRITE          ; Get the future sprite in HL
    EX      DE,HL               ; Save sprite address in DE
    _ADDLP  (SPRITE_LOC)
    _CALL   GET_PLAYGROUND_POS  ; Get the position in HL
    EX      DE,HL               ; HL <- sprite address, DE <- position


CHECK_COLLISION:
    LD      B,4
CHECK_COLLISION_NEXT_ROW:
    LD      C,4
CHECK_COLLISION_CHECK_CHAR;
    LD      A,(HL)
    CP      '0'
    JR      Z,CHECK_COLLISION_NEXT_CHAR
    LD      A,(DE)
    CP      NULL
    JR      NZ,CHECK_COLLISION_COLLIDE  ; Both are non null, we can not rotate
CHECK_COLLISION_NEXT_CHAR:
    INC     HL                  ; Move to the next sprite char
    INC     DE                  ; Move to the next playground cell
    DEC     C
    JR      NZ,CHECK_COLLISION_CHECK_CHAR
    EX      DE,HL               ; Put position in HL
    PUSH    BC                  ; Save our counters
    LD      BC,PG_COLS - 4      ; set position at start of next sprite line
    ADD     HL,BC               ; move position to start of next row
    POP     BC                  ; restore counters
    EX      DE,HL               ; put back position in DE and sprite in HL
    DEC     B
    JR      NZ,CHECK_COLLISION_NEXT_ROW
    JR      CHECK_COLLISION_FREE
CHECK_COLLISION_COLLIDE:
    POP     BC
    SUB     A
    ADD     1                   ; Set NZ
    RET
CHECK_COLLISION_FREE:
    POP     BC
    SUB     A                   ; Set Z
    RET                    


SPRITE_ROTATE:
    _CALL   EREASE_SPRITE
    CALL    CAN_ROTATE
    JR      NZ,SPRITE_ROTATE_EXIT ; If NZ is set, cannot rotate and exit
    LD      A,(SPRITE_ORIENT)
    ADD     B
    AND     $03                 ; Modulo 4
    LD      (SPRITE_ORIENT),A
SPRITE_ROTATE_EXIT:
    CALL    DRAW_SPRITE
    RET


SPRITE_TRANSLATE:
    _CALL   EREASE_SPRITE
    CALL    CAN_TRANSLATE
    JR      NZ,CAN_TRANSLATE_EXIT ; If NZ is set, cannot translate and exit
    LD      A,(SPRITE_COL)
    ADD     B
    LD      (SPRITE_COL),A
CAN_TRANSLATE_EXIT:    
    CALL   DRAW_SPRITE
    RET


SPRITE_DOWN:
    _CALL   EREASE_SPRITE           ; Erease the sprite to allow movement
    CALL    CAN_GO_DOWN             ; Check if can go down
    JR      NZ,SPRITE_DOWN_FREEZE   ; Cannot go down, we freeze this sprite
    LD      A,(SPRITE_ROW)          ; Can go down, we increment the row
    INC     A
    LD      (SPRITE_ROW),A
    JR      SPRITE_DOWN_EXIT        ; GTFO
SPRITE_DOWN_FREEZE:
    CALL    DRAW_SPRITE             ; Cannot go down, redraw the sprite
    LD      HL,SCORE                
    INC     (HL)                    ; Increment the score
    CALL    CLEAR_COMPLETED_ROWS    ; Delete complete rows if any
    CALL    PRINT_SCORE             ; Print the score
    LD      A,(SPRITE_ROW)          ;
    CALL    REDRAW_SECTION          ; Erease completed rows

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    CALL    FIND_GAP                ; search for gaps
    JR      NZ,SPRITE_DOWN_SPAWN    ; no gap, lets spawn
    CALL    COMPACT                 ; there is a gap, compact the rows
    CALL    FIND_GAP                ; there may be a second gap, look for it
    CALL    Z,COMPACT               ; compact if there is a second gap
    _ADDLP  250
    _CALL   SLEEP                   ; leave the gap is visible for 1 sec
    CALL    PRINT_PLAYGROUND        ; reprint the whole playground
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

SPRITE_DOWN_SPAWN:
    CALL    SPAWN_SPRITE            ; Spawn a new sprite
    CALL    CAN_SPAWN               ; Check if the new spawned sprite collides
    JR      Z,SPRITE_DOWN_EXIT      ; Exit if we can spawn.
    CALL    GAME_OVER               ; Otherwise new sprite collide: game over!
    POP     HL                      ; Dump the return address away
    JP      TETRIZ_START            ; Restart the game
SPRITE_DOWN_EXIT:
    CALL    DRAW_SPRITE             ; Draw the sprite
    RET


CLEAR_COMPLETED_ROWS:
    LD      B,4
    LD      A,(SPRITE_ROW)
    LD      C,A
    OR      A                       ; Check if A == 0    
    JR      NZ,CLEAR_COMPLETED_ROWS_CHECK_ROW
    INC     C                       ; Don't check the top wall
    DEC     B
CLEAR_COMPLETED_ROWS_CHECK_ROW:
    _ADDRP  BC
    _CALL   IS_ROW_COMPLETE
    LD      A,TRUE
    CP      L
    JR      NZ,CLEAR_COMPLETED_ROWS_NEXT_ROW ; If not complete, jump
    _ADDRP  BC                      ; The row is complete
    _CALL   CLEAR_ROW               ; Clear the row
    LD      HL,(SCORE)
    LD      DE,10                   ; clearing a row add 10 points
    ADD     HL,DE
    LD      (SCORE),HL
CLEAR_COMPLETED_ROWS_NEXT_ROW:
    INC     C
    DEC     B
    RET     Z
    LD      A,C
    CP      PG_ROWS - 1                 
    JR      NZ,CLEAR_COMPLETED_ROWS_CHECK_ROW ;not at the floor yet
    RET


; Return:
;    - the top non empty row of the gap in H
;    - the bottom empty row of the gap in L
; Flag Z is set if there is a gap, otherwise it is unset.
FIND_GAP:
    LD      H,0
    LD      L,0             ;empty row not found
    LD      C,21
FIND_GAP_SEARCH_EMPTY:
    DEC     C
    CALL    IS_ROW_EMPTY
    JR      NZ,FIND_GAP_SEARCH_EMPTY
    LD      L,C             ; L = first empty row
FIND_GAP_SEARCH_NOT_EMPTY:
    DEC     C
    JR      Z,FIND_GAP_DONE
    CALL    IS_ROW_EMPTY
    JR      Z,FIND_GAP_SEARCH_NOT_EMPTY
FIND_GAP_DONE:
    SUB     A               ; A=0
    CP      C               ; if C == 0
    JR      Z,FIND_GAP_NOT_FOUND
    LD      H,C             ; H = first non empty row since empty row
    SUB     A               ; set Z indicating there is a gap
    RET
FIND_GAP_NOT_FOUND:
    ADD     1               ; set NZ indicating there is no gap
    RET


; Make rows from H and above fall down to row L.
COMPACT:
    CALL    COPY_ROW            ; copy row H into row L
    DEC     L                   ; move up one row
    DEC     H                   
    LD      C,H
    CALL    IS_ROW_EMPTY
    JR      Z,COMPACT_DONE
    CALL    COPY_ROW
    JR      COMPACT
COMPACT_DONE:
    CALL    COPY_ROW
    RET


; Check if the row in C is empty
; Flag Z is set if empty, otherwise it is unset.
IS_ROW_EMPTY:
    PUSH    HL
    CALL    GET_ROW
    CALL    IS_NULL_10
    POP     HL
    RET

; Copy row H to row L
COPY_ROW:
    PUSH    HL
    LD      B,H                 ; save source row in B
    LD      C,L                 ; set the GET_ROW parameter in C
    CALL    GET_ROW             ; get the target row in HL
    EX      DE,HL               ; put the target row in DE
    LD      C,B                 ; set the GET_ROW parameter in C
    CALL    GET_ROW             ; get source row in HL
    LD      BC,10               ; the number of blocks to copy
    LDIR                        ; execute the copy until BC == 0
    POP     HL
    RET



; Sets Z if HL contains 10 consecutive null values.
; AF is not preserved
IS_NULL_10:
    PUSH    HL
    PUSH    BC
    LD      C,10                ; there is 10 columns to check
    SUB     A                   ; clear A
IS_NULL_10_COMPARE:
    CP      (HL)                ; check if the byte is null
    JR      NZ,IS_NULL_10_EXIT ; not null, return
    INC     HL                  ; move to the tetris block cell
    DEC     C                   ; one less column to check
    JR      NZ,IS_NULL_10_COMPARE ; did we reach the last column?
IS_NULL_10_EXIT:
    POP     BC                  ; restore registers
    POP     HL                  
    RET                         ; gtfo


; Converts C line number to the start of the matching line in the playground.
; Returns the line address in HL
; If the requested row number is 0, returns the EMPTY_ROW address instead.
GET_ROW:
    PUSH    AF
    PUSH    BC
    SUB     A                   ; A = 0
    CP      C                   ; check if C == 0
    JR      Z,GET_ROW_EMPTY_ROW ; If the requested row is 0, return the empty row
    LD      B,PG_COLS           ; loads the number of cols per rows in B
    _ADDRP  BC                  ; add BC to the parameter stack
    _CALL   MUL8                ; HL = B * C
    LD      BC,PLAYGROUND       ; sets BC to the playground address
    ADD     HL,BC               ; add the start address to HL
    INC     HL                  ; skip the left wall byte
    JR      GET_ROW_EXIT
GET_ROW_EMPTY_ROW:
    LD      HL,EMPTY_ROW        ; set the returned value to the empty row
GET_ROW_EXIT:
    POP     BC
    POP     AF
    RET                         ; gtfo



; Input:  High byte of param 0 is the row index to check
; Output: L = 1 if complete, else L = 0
IS_ROW_COMPLETE:
    _GETP   BC,0                    ; Row to check in C
    LD      B,PG_COLS
    _ADDRP  BC      
    _CALL   MUL8                    ; HL = B * C
    EX      DE,HL                   ; Put playground index in DE
    LD      HL,PLAYGROUND           ; Load the playground address in HL
    ADD     HL,DE                   ; Shift HL to the first byte of the row
    INC     HL                      ; Skip the left wall
    SUB     A                       ; A = 0
    LD      C,10                    ; The number of cells to check
IS_ROW_COMPLETE_CHECK_CELL:
    CP      (HL)                    ; check if (HL) == 0
    JR      Z,IS_ROW_COMPLETE_FALSE ; If the cell is empty, not complete
    INC     HL
    DEC     C
    JR      NZ,IS_ROW_COMPLETE_CHECK_CELL
IS_ROW_COMPLETE_TRUE:
    LD      A,TRUE
    LD      L,A
    _RET_HL HL
IS_ROW_COMPLETE_FALSE:
    LD      A,FALSE
    LD      L,A                     ; Return row not complete
    _RET_HL HL


CLEAR_ROW:
    _GETP   BC,0                    ; Row to check in C
    LD      B,PG_COLS
    _ADDRP  BC      
    _CALL   MUL8                    ; HL = B * C
    EX      DE,HL                   ; Put playground index in DE
    LD      HL,PLAYGROUND           ; Load the playground address in HL
    ADD     HL,DE                   ; Shift HL to the first byte of the row
    INC     HL                      ; Skip the left wall
    SUB     A                       ; A = 0
    LD      C,10                    ; The number of cells to check
CLEAR_ROW_CLEAR_CELL:
    LD      (HL),A
    INC     HL
    DEC     C
    JR      NZ,CLEAR_ROW_CLEAR_CELL
CLEAR_ROW_EXIT:
    RET

GAME_OVER:
    CALL    DRAW_SPRITE             ; Draw the final sprite
    LD      B,9
    LD      C,4
    _ADDRP  BC
    _CALL   SET_POS
    _ADDLP  BOX_LINE
    _CALL   PRINT
    LD      B,10
    _ADDRP  BC
    _CALL   SET_POS
    _ADDLP  GAME_OVER_TXT
    _CALL   PRINT
    LD      B,11
    _ADDRP  BC
    _CALL   SET_POS
    _ADDLP  BOX_LINE
    _CALL   PRINT
GAME_OVER_WAIT_KEY:
    CALL    GETCHAR         ; Read the next character in the console
    JR      Z,GAME_OVER_WAIT_KEY  ; No key pressed
    RET


PRINT_SCORE:
    LD      B,2
    LD      C,28
    _ADDRP  BC
    _CALL   SET_POS
    _ADDLP  SCORE_TEXT
    _CALL   PRINT
    _ADDLP  (SCORE)
    _CALL   UINT_TO_STRING
    _ADDRP  HL
    _CALL   PRINT
    RET


PRINTLN:
    POP     IX
    CALL    PRINT
    LD      A,10
    CALL    OUTC
    LD      A,13
    CALL    OUTC
    PUSH    IX
    RET

NEWLINE:
    LD      A,10
    CALL    OUTC
    LD      A,13
    CALL    OUTC
    RET


UINT_TO_STRING:
    _GETP   DE,0
    _ADDLP  10              ;Decimal display (conv. base)
    _ADDRP  DE              ;The number to convert
    _ADDLP  17              ;The size of the string buffer
    _ADDLP  ITOA_BUF        ;The target string buffer
    _CALL   ITOA
    _RET_HL HL



INIT_PLAYGROUND:
    LD      C,0
    LD      HL,PLAYGROUND
    LD      B,PG_COLS
INIT_PLAYGROUND_TOP:
    LD      A,'7' - '0'
    LD      (HL),A
    INC     HL
    DEC     B
    JR      NZ,INIT_PLAYGROUND_TOP
INIT_PLAYGROUND_LINE:
    LD      A,'7' - '0'
    LD      (HL),A
    INC     HL
    LD      B,PG_COLS - 2
    LD      A,0
INIT_PLAYGROUND_CELL:
    LD      (HL),A
    INC     HL
    DEC     B
    JR      NZ,INIT_PLAYGROUND_CELL
    LD      A,'7' - '0'
    LD      (HL),A
    INC     HL
    INC     C
    LD      A,PG_ROWS - 2
    CP      C
    JR      NZ,INIT_PLAYGROUND_LINE
    LD      B,PG_COLS
INIT_PLAYGROUND_BOTTOM:
    LD      A,'7' - '0'
    LD      (HL),A
    INC     HL
    DEC     B
    JR      NZ,INIT_PLAYGROUND_BOTTOM
    LD      A,-1
    LD      (LAST_COLOR),A
    RET


PRINT_PLAYGROUND:
    DI
    LD      B,1
    LD      C,1
    _ADDRP  BC
    _CALL   SET_POS
    LD      HL,PLAYGROUND
    LD      B,PG_COLS
    LD      C,0
PRINT_PLAYGROUND_CHAR
    LD      A,(HL)
    ADD     '0'
    _ADDRP  AF
    _CALL   CHANGE_COLOR
    CALL    OUTC
    CALL    OUTC
    INC     HL
    DEC     B
    JR      NZ,PRINT_PLAYGROUND_CHAR
    CALL    NEWLINE
    INC     C
    LD      A,PG_ROWS
    CP      C
    JR      Z,PRINT_PLAYGROUND_END
    LD      B,PG_COLS
    JR      PRINT_PLAYGROUND_CHAR
PRINT_PLAYGROUND_END:
    LD      B,1
    LD      C,1
    _ADDRP  BC
    _CALL   SET_POS
    LD      B,COLOR_WHITE
    LD      C,COLOR_BLACK
    _ADDRP  BC
    _CALL    SET_COLOR
    _ADDLP  PADDING
    _CALL   PRINT
    _ADDLP  WELCOME
    _CALL   PRINT
    LD      B,COLOR_BLACK
    LD      C,COLOR_WHITE
    _ADDRP  BC
    _CALL   SET_COLOR
    EI
    RET


CHANGE_COLOR:
    _GETP   HL,0
    LD      A,(LAST_COLOR)
    CP      H
    RET     Z
    LD      L,H             ; Foreground and background set
    _ADDRP  HL
    _CALL   SET_COLOR
    LD      (LAST_COLOR),A  ; Update last color
    RET


SPAWN_SPRITE:
    CALL    XRND                ; Generate a random number
    LD      B,H                 ; Put that number in BC
    LD      C,L
    LD      D,0
    LD      E,7                 ; Divide by 7
    CALL    BC_DIVBY_DE
    LD      A,L                 ; Get the remainder
    LD      (SPRITE_INDEX),A    ; as the sprite index
    SUB     A
    LD      (SPRITE_ORIENT),A
    _ADDLP  (SPRITE)
    _CALL   GET_SPRITE
    _ADDRP  HL
    _CALL   GET_START_ROW
    LD      A,L
    LD      (SPRITE_ROW),A
    LD      A,4
    LD      (SPRITE_COL),A
    RET


GET_START_ROW:
    _GETP   HL,0
    LD      A,'0'
    CP      (HL)
    JR      NZ,GET_START_ROW_ONE
    INC     HL
    CP      (HL)
    JR      NZ,GET_START_ROW_ONE
    INC     HL
    CP      (HL)
    JR      NZ,GET_START_ROW_ONE
    INC     HL
    CP      (HL)
    JR      NZ,GET_START_ROW_ONE
    LD      C,0
    _RET_HL BC
GET_START_ROW_ONE:
    LD      C,1
    _RET_HL BC


DRAW_SPRITE:
    DI
    _ADDLP  (SPRITE)
    _CALL   GET_SPRITE
    PUSH    HL                  ; Save the sprite address on the stack
    _ADDLP  (SPRITE_LOC)
    _CALL   GET_PLAYGROUND_POS  ; Get the drawing start address
    EX      DE,HL               ; Put the drawing address in DE
    POP     HL                  ; Get back the sprite address in HL
    LD      B,4                 ; Number of rows of the sprite
DRAW_SPRITE_ROW:
    LD      C,4                 ; Number of columns of the sprite
DRAW_SPRITE_CHAR:
    LD      A,(HL)              ; Load the first sprite byte
    SUB     '0'                 ; Check if it is empty
    JR      Z,DRAW_SPRITE_NEXTCHAR  ; Do not print anything if empty
    LD      (DE),A              ; Set the playground "pixel"
DRAW_SPRITE_NEXTCHAR:
    INC     HL
    INC     DE
    DEC     C
    JR      NZ,DRAW_SPRITE_CHAR ; Print the next char if not zero
    DEC     B
    JR      Z,DRAW_SPRITE_END   ; If last row was printed, exit
    PUSH    BC                  ; Save counters
    LD      BC,PG_COLS - 4      ; Get the number of byte to skip
    _ADD_DEBC                   ; Skip to the next line
    POP     BC                  ; Get counters back in BC
    JR      DRAW_SPRITE_ROW     ; Print the next row
DRAW_SPRITE_END:
    LD      A,(SPRITE_ROW)      ; Get the first row of the section to redraw


REDRAW_SECTION:
    DI
    OR      A                   ; the row is zero
    JR      Z,REDRAW_SECTION_FIRST_ROW ; on zero start drawing
    LD      B,5
    DEC     A                   ; get the previous line
    LD      D,A               
    LD      E,PG_COLS
    _ADDRP  DE
    _CALL   MUL8                ; multiply the sprite row by the 
    LD      A,L                 ; A contains the byte shift
REDRAW_SECTION_FIRST_ROW:
    LD      HL,PLAYGROUND
    ADD     L
    LD      L,A
    LD      A,0
    ADC     H
    LD      H,A                 ; The playground address is now shifted
REDRAW_SECTION_START:
    PUSH    HL                  ; save the drawing pointer
    LD      HL,(SPRITE_LOC)     ; H=row, L=col
    LD      L,1                 ; Set the column to 1
    _ADDRP  HL                  ; Add the row and col parameters
    _CALL   SET_POS             ; Set the cursor at the right line
    POP     HL                  ; restore the drawing pointer
REDRAW_SECTION_LINE:
    LD      C,PG_COLS           ; how many columns per rows in C
REDRAW_SECTION_CHAR:
    LD      DE,PLAYGROUND + PG_COLS
    CALL    COMPARE_HLDE        ; Skip the first playground row
    JR      C,REDRAW_SECTION_NEXT_CHAR
    LD      A,(HL)              ; Loads the byte to display
    ADD     COLOR_BLACK         ; Shift it to the color space
    _ADDRP  AF
    _CALL   CHANGE_COLOR        ; Sets BG and FG using the byte to display
    CALL    OUTC
    CALL    OUTC                ; Print twice for aspect ratio
REDRAW_SECTION_NEXT_CHAR:    
    INC     HL                  ; move to the next char to print
    LD      DE,PLAYGROUND_END   ; Check if HL is past the end of the playground
    CALL    COMPARE_HLDE
    JR      Z,REDRAW_SECTION_END ; If equal, we are done
    LD      A,E
    CP      L
REDRAW_SECTION_CONTINUE:
    DEC     C
    JR      NZ,REDRAW_SECTION_CHAR
    CALL    NEWLINE
    DEC     B
    JR      NZ,REDRAW_SECTION_LINE
REDRAW_SECTION_END:
    LD      B,COLOR_BLACK
    LD      C,COLOR_WHITE
    _ADDRP  BC
    _CALL   SET_COLOR
    EI
    RET


COMPARE_HLDE:
    LD      A,H
    CP      D                   ; compare H and D
    RET     NZ                  ; NC: HL > DE; C: HL < DE
    LD      A,L
    CP      E
    RET                         ; Z,NC -> HL = DE; NZ -> same as above


EREASE_SPRITE:
    DI
    _ADDLP  (SPRITE)
    _CALL   GET_SPRITE
    PUSH    HL                  ; Save the sprite address on the stack
    _ADDLP  (SPRITE_LOC)
    _CALL   GET_PLAYGROUND_POS  ; Get the drawing start address
    EX      DE,HL               ; Put the drawing address in DE
    POP     HL                  ; Get back the sprite address in HL
    LD      B,4                 ; Number of rows of the sprite
EREASE_SPRITE_ROW:
    LD      C,4                 ; Number of columns of the sprite
EREASE_SPRITE_CHAR:
    LD      A,(HL)              ; Load the first sprite byte
    SUB     '0'                 ; Check if it is empty
    JR      Z,EREASE_SPRITE_NEXTCHAR  ; Do not print anything if empty
    SUB     A                   ; Reset the pixel
    LD      (DE),A              ; Set the playground "pixel"
EREASE_SPRITE_NEXTCHAR:
    INC     HL
    INC     DE
    DEC     C
    JR      NZ,EREASE_SPRITE_CHAR ; Print the next char if not zero
    DEC     B
    JR      Z,EREASE_SPRITE_END   ; If last row was printed, exit
    PUSH    BC                  ; Save counters
    LD      BC,PG_COLS - 4      ; Get the number of byte to skip
    _ADD_DEBC                   ; Skip to the next line
    POP     BC                  ; Get counters back in BC
    JR      EREASE_SPRITE_ROW     ; Print the next row
EREASE_SPRITE_END:
    EI
    RET



GET_SPRITE:
    _GETP   DE,0                ; D = sprite index, E = orientation
    LD      B,16*4              ; Memeory size of a tetroid
    LD      C,D                 ; At sprite index
    _ADDRP  BC                  ; Add the two 8 bit reg as parameters
    _CALL   MUL8                ; Multiply to get the tetroid index
    PUSH    HL                  ; Save tetroid index on the stack
    LD      B,16                ; Memory size of a tetroid sprite
    LD      C,E                 ; With the given sprite orientation
    _ADDRP  BC                  ; Param: tetroid size and orientation
    _CALL   MUL8                ; Multiply together to get the shift
    POP     BC                  ; Get the tetroid index back in BC
    ADD     HL,BC               ; Add orient. to tetroid index = sprite index
    LD      BC,TETROIDS         ; Load the TETROIDS address in BC
    ADD     HL,BC               ; Add the tetroid address to the sprite index
    _RET_HL HL                  ; Return the tetroid sprite address


GET_PLAYGROUND_POS:
    _GETP   DE,0                ; D = row, E = col
    LD      B,D                 ; Load the sprite row
    LD      C,PG_COLS           ; Load the number of columns in a row
    _ADDRP  BC                  ; Add the two 8 bit params
    _CALL   MUL8                ; Multiply them together
    XOR     A                   ; Set A to 0
    LD      B,A                 ; Reset B
    LD      C,E                 ; Load the SPRITE col
    ADD     HL,BC               ; Add the column to the row index
    LD      BC,PLAYGROUND       ; Load the playground address
    ADD     HL,BC               ; Add the address to the index
    _RET_HL HL                  ; return the sprite positin in playground



; 16-bit xorshift pseudorandom number generator by John Metcalf
; 20 bytes, 86 cycles (excluding ret)
; returns   hl = pseudorandom number
; corrupts   a
; generates 16-bit pseudorandom numbers with a period of 65535
; using the xorshift method:
; hl ^= hl << 7
; hl ^= hl >> 9
; hl ^= hl << 8
; some alternative shift triplets which also perform well are:
; 6, 7, 13; 7, 9, 13; 9, 7, 13.
XRND:
  ld hl,(RANDOM_SEED)
  ld a,h
  rra
  ld a,l
  rra
  xor h
  ld h,a
  ld a,l
  rra
  ld a,h
  rra
  xor l
  ld l,a
  xor h
  ld h,a
  ld (RANDOM_SEED),hl
  ret


END