#include "layout.z80"
#include "retroz-bios-inc.z80"

 MACRO RANDOMIZE
    LD      HL,(RANDOM_SEED)
    INC     HL
    LD      (RANDOM_SEED),HL
 ENDM

 MACRO   CPRINT &chr
    EX      AF,AF'
    LD      A,&chr
    CALL    OUTA
    EX      AF,AF'
 ENDM


#code _DATA

WELCOME     DEFB "+++ TetriZ +++",0
PRESS_START DEFB "Press any key to start...",0
START       DEFB "START!!!",0

TETROMINOS:
SHAPE1      DEFW $E400,$2620,$04E0,$8C80
SHAPE2      DEFW $E200,$2260,$08E0,$C880
SHAPE3      DEFW $C600,$2640,$0C60,$4C80
SHAPE4      DEFW $6600,$6600,$6600,$6600
SHAPE5      DEFW $6C00,$8C40,$06C0,$8C40
SHAPE6      DEFW $E800,$6220,$02E0,$8C80
SHAPE7      DEFW $0F00,$4444,$0F00,$4444



#data _HEAP

RANDOM_SEED         DEFS 2
; STRUCT_TETROMINO:
; STRUCT_TETROMINO_POS           DEFS 2
; STRUCT_TETROMINO_SHAPE         DEFS 2
; STRUCT_TETROMINO_ORIENTATION   DEFS 1
; NEXT_TETROMINOS DEFS 2




#code _PROGRAM

MAIN:

    _ADDLP  WELCOME
    _CALL   PRINT
     CALL    PRINT_ENDL
     CALL    PRINT_ENDL

    _ADDLP  PRESS_START
    _CALL   PRINT
    CALL    PRINT_ENDL

    CALL    START_RX_INT    ;Start listening to keyboard inputs

WAIT_START:
    RANDOMIZE
    CALL    GETCHAR
    _jrf    WAIT_START
    CALL    CLS

    

    ;LD      L,0
    ;CALL    DRAW_TETROMINO


START_CYCLE:
    LD      HL,TETROMINOS
    LD      B,7

DISPLAY_SHAPE:
    LD      A,B
    ADD     '0'
    LD      C,A

    _ADDRP  BC
    _ADDLP  $050A
    _ADDRP  HL
    _CALL   DRAW_TETROMINO

    _ADDRP  BC
    _ADDLP  $1020
    _ADDRP  HL
    _CALL   DRAW_TETROMINO

    _ADDRP  BC
    _ADDLP  $1212
    _ADDRP  HL
    _CALL   DRAW_TETROMINO


    _ADDLP  500
    _CALL   SLEEP

    LD      C,COLOR_BLACK
    _ADDRP  BC
    _ADDLP  $050A
    _ADDRP  HL
    _CALL   DRAW_TETROMINO

    LD      C,COLOR_BLACK
    _ADDRP  BC
    _ADDLP  $1020
    _ADDRP  HL
    _CALL   DRAW_TETROMINO

    LD      C,COLOR_BLACK
    _ADDRP  BC
    _ADDLP  $1212
    _ADDRP  HL
    _CALL   DRAW_TETROMINO


    LD      DE,8
    ADD     HL,DE
    DEC     B
    JP      NZ,DISPLAY_SHAPE
    JP      START_CYCLE


GAME_LOOP:
    CALL    GETCHAR
    _jrf    GAME_LOOP
    CALL    OUTA
    JP      GAME_LOOP


; 16-bit xorshift pseudorandom number generator by John Metcalf
; 20 bytes, 86 cycles (excluding ret)
; returns   hl = pseudorandom number
; corrupts   a
; generates 16-bit pseudorandom numbers with a period of 65535
; using the xorshift method:
; hl ^= hl << 7
; hl ^= hl >> 9
; hl ^= hl << 8
; some alternative shift triplets which also perform well are:
; 6, 7, 13; 7, 9, 13; 9, 7, 13.
XRND:
  ld hl,(RANDOM_SEED)
  ld a,h
  rra
  ld a,l
  rra
  xor h
  ld h,a
  ld a,l
  rra
  ld a,h
  rra
  xor l
  ld l,a
  xor h
  ld h,a
  ld (RANDOM_SEED),hl
  ret




; Constant values required by the DRAW_TETROMINOS function
NEXT_LINE       DEFB ESC,"[B",ESC,"[8D",0 ;Down 1, back 4
FORWARD_2       DEFB ESC,"[2C",0
BLOCK           DEFB "  ",0

; DRAW_TETROMINO's parameter indices
DT_PARAM_COLOR  EQU 2
DT_PARAM_POS    EQU 1
DT_PARAM_SHAPE  EQU 0               ; Contains the shape address not the shape itself

; Draw a tetromino at a screen position with a given color.
DRAW_TETROMINO:

    ; Set cursor position
    _GETP       BC,DT_PARAM_POS     ; Get the position parameter
    _ADDRP      BC                  ; Add the position parameter for SET_COLOR call
    _CALL       SET_POS             ; Call the set position function

    ; Set the tetromino color
    _GETP       BC,DT_PARAM_COLOR   ; Get the color parameter
    LD          B,C                 ; Set the background to the same color as the foreground
    _ADDRP      BC                  ; Add background (B) and foreground (C) color parameters call
    _CALL       SET_COLOR           ; Call the set color function

    ; Load the shape value into DE using the shape address
    _GETP       HL,DT_PARAM_SHAPE   ; Get the shape address parameter
    LD          E,(HL)
    INC         HL
    LD          D,(HL)

    ; Create a 4 bytes array to store each shape row on the stack
    PUSH        HL
    PUSH        HL

    ; Initialize the array of rows. Row data is stored in the high nibble of each byte.
    LD          IX,$0000
    ADD         IX,SP               ; Initialize the indexer to the array address
    LD          (IX+0),D
    SLA         D
    SLA         D
    SLA         D
    SLA         D
    LD          (IX+1),D
    LD          (IX+2),E
    SLA         E
    SLA         E
    SLA         E
    SLA         E
    LD          (IX+3),E
    
    ; Initialize the array cursor HL to the first array element.
    PUSH        IX                  ; Save the array address on the stack
    POP         HL                  ; Get the array address back into HL

    ; Draw the tetromino
    LD          B,4                 ; Initialize the row counter
DT_DRAW_ROWS:
    LD          C,4                 ; Initialize the col counter
    LD          A,(HL)              ; Load the row into A
    AND         $F0                 ; Mask the row data
    JR          NZ,DT_DRAW_COLS     ; If A != 0, draw that row
    DEC         B                   ; Row is empty, skip that row
    JR          Z,DT_END            ; No more rows, we are done
    INC         HL                  ; Move the cursor to the next row byte
    JR          DT_DRAW_ROWS        ; Draw the next row
DT_DRAW_COLS:
    SLA         A
    JR          C,DT_PRINT          ; Check if the bit is set
    _ADDLP      FORWARD_2           ; Not set, skip two characters
    _CALL       PRINT
    JR          DT_DRAW_COLS_END
DT_PRINT:
    _ADDLP      BLOCK               ; Bit is set, print a block
    _CALL       PRINT
DT_DRAW_COLS_END:
    DEC         C                   ; One less column to print
    JR          NZ,DT_DRAW_COLS     ; Jump to draw the next column if it is not the last column
    DEC         B                   ; Done dwaing the row, decrement the row count
    JR          Z,DT_END            ; Jump to the end of the function if that was the last row
    INC         HL                  ; Increment the array cursor
    _ADDLP      NEXT_LINE
    _CALL       PRINT               ; Set the cursor on the next line to draw
    JR          DT_DRAW_ROWS        ; Jump to draw the next row

DT_END:
    ; Delete the array from the stack
    POP         HL
    POP         HL

    ; "Hide" the cursor in the top left corner
    _ADDLP      $0101
    _CALL       SET_POS

    RET






