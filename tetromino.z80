

#data _TETROMINO_VARIABLES

; -----=== Constants ===-----

; Define constants for the tetromnio structure
TETROMINO_STRUCT        EQU 20  ; The size of a tetromino structure. Will be used with MALLOC and DEALLOC.
TETROMINO_INDEX         EQU  0  ; 1b, values [0,6]. There is seven tetrominos.
TETROMINO_ORIENT        EQU  1  ; 1b, values [0,3]. There is four possible orientations.
TETROMINO_ROW           EQU  2  ; 1b, the row where the tetromino is drawn in the board.
TETROMINO_COL           EQU  3  ; 1b, the columne where the tetromino will be drawn.
TETROMINO_DATA          EQU  4  ; 16b, the tetromino value from the TETROMINOS given the current index and orientation.

TETROMINO_COUNT         EQU 7   ; The number of tetromino shapes.

; -----=== Variables ===-----

TETROMINO_SPRITE    DEFS TETROMINO_STRUCT
NEXT_TETROMINO      DEFS 1


#code _TETROMINO

TETROMINOS: DEFW $0E40,$4C40,$4E00,$4640    ; Tetromino index 0, orientation 0 to 3
            DEFW $0E20,$44C0,$8E00,$6440    ; Tetromino index 1, orientation 0 to 3
            DEFW $0C60,$2640,$0C60,$2640    ; Tetromino index 2, orientation 0 to 3
            DEFW $0660,$0660,$0660,$0660    ; Tetromino index 3, orientation 0 to 3
            DEFW $0F00,$4444,$0F00,$4444    ; Tetromino index 6, orientation 0 to 3
            DEFW $0E80,$C440,$2E00,$4460    ; Tetromino index 5, orientation 0 to 3
            DEFW $06C0,$4620,$06C0,$4620    ; Tetromino index 4, orientation 0 to 3


; Initialize the tetromino sprite and the next tetromino using the random value
; in HL.
; Params:
;           - HL: The random value used to select the current tetromino and the next one.
; Changes: IX,A,B,C,D,E,H,L
INIT_TETROMINO_AND_NEXT:
    CALL    INIT_TETROMINO
    SWAPHL
    JP      INIT_NEXT_TETROMINO

; Initialize the global tetromino sprite with the specified shape index at orientation 0.
; Params:
;       - HL: The shape index.
; Changes: A,B,C,D,E,IX
INIT_TETROMINO:
    PUSH    HL
    LD      C,TETROMINO_COUNT
    CALL    MODULO                      ; 0 <= A < TETROMINO_COUNT
    LD      H,0
    LD      IX,TETROMINO_SPRITE
    LD      (IX+TETROMINO_INDEX),A
    LD      (IX+TETROMINO_ORIENT),H
    LD      (IX+TETROMINO_ROW),0
    LD      (IX+TETROMINO_COL),4
    CALL    GET_TETROMINO_DATA
    LD      (IX+TETROMINO_DATA),DE
    POP     HL
    RET


; Initialize the next tetromino sprint index with the specified shape index. Does a modulo
; Params:
;       - HL: The shape index.
; Changes: A,B,C,D,E,IX
INIT_NEXT_TETROMINO:
    PUSH    HL
    LD      C,TETROMINO_COUNT
    CALL    MODULO                      ; 0 <= A < TETROMINO_COUNT
    LD      IX,TETROMINO_SPRITE
    CP      (IX+TETROMINO_INDEX)        ; check if A is the same as the current tetromino
    JR      NZ,INIT_NEXT_TETROMINO_OK   ; not the same, jump
    INC     A                           ; Same, increment A
    CP      7                           ; check if eq 7
    JR      NZ,INIT_NEXT_TETROMINO_OK   ; not eq 7, jump
    XOR     A                           ; roll over to 0
INIT_NEXT_TETROMINO_OK:
    LD      (NEXT_TETROMINO),A
    POP     HL
    RET

; Return the tetrmonio data for the given shape index and orientation.
; Params:
;           - IX: The tetromino sprite
;           - H: Tetromino orientation (sprite shift)
;           - L: Tetromino index
; Returns:
;           DE: The shape data for a given orientation.
; Changes: A,B,C,D,E,H,L
GET_TETROMINO_DATA:
    LD      A,5
    LD      B,16
GET_TETROMINO_DATA_LOOP:
    LD      (IX+TETROMINO_DATA),A
    INC     IX
    DJNZ GET_TETROMINO_DATA_LOOP

;     LD      A,L                         ; Put the tetromino index in A
;     MULA_BY_8                           ; Multiply the tetromino index by 8 (each tetromino is 8 byte).
;     ADD     H                           ; Add the sprite shift (orientation) to the tetromino index    
;     ADD     H                           ; Since each sprite is 2 bytes long, repeat
;     LD      H,0                         ; Reset H
;     LD      L,A                         ; HL = sprite address
;     LD      DE,TETROMINOS               ; Put tetromino base array address in DE
;     ADD     HL,DE                       ; HL = TetrominoArrayAddress + SpriteShift => Sprite address

;     LD      DE,(HL)                     ; DE = compressed tetromino data
;     LD      HL,(IX+TETROMINO_DATA)      ; HL = decompressed tetromino data array

;     LD      A,D                         ; Put the first byte to decompress in A
;     LD      C,2                         ; Load the byte counter
; GET_TETROMINO_DATA_BYTE:
;     LD      B,8                         ; Load the bit counter
; GET_TETROMINO_DATA_BIT:
;     RLA                                 ; Set the carry flag to the next sprite cell value
;     LD      (HL),0                      ; Set the current decompressed data byte to 0
;     JR      Z,GET_TETROMINO_DATA_ZERO   ; Check if the current sprite cell is filled or empty
;     PUSH    AF                          ; Save the sprite byte being decompressed
;     LD      A,(IX+TETROMINO_INDEX)      ; A = tetromino index
;     LD      (HL),A                      ; Set the current byte to the tetromino index
;     POP     AF                          ; Restores the byte being decompressed
; GET_TETROMINO_DATA_ZERO:
;     INC     HL                          ; Advance one byte into the decompressed sprite buffer.
;     DJNZ    GET_TETROMINO_DATA_BIT      ; Loop until all bits are scanned (when B reaches 0)
;     LD      A,E                         ; Load the next byte in A
;     DEC     C                           ; Byte done, remove it from the counter
;     JR      NZ,GET_TETROMINO_DATA_BYTE  ; Jump to decompress the second byte if the byte counter != 0.

    RET                                 